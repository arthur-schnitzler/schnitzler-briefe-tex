name: Auto PDF Generation from XML Changes

on:
  repository_dispatch:
    types: [xml-files-changed]
  workflow_dispatch: # Allow manual trigger

jobs:
  check-and-process:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout current repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Checkout data repository
      uses: actions/checkout@v4
      with:
        repository: arthur-schnitzler/schnitzler-briefe-data
        path: data-repo
        fetch-depth: 2  # Need at least 2 commits to compare

    - name: Setup Java for Saxon
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install TeXLive
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-full
        sudo apt-get install -y xindy

    - name: Download Saxon if needed
      run: |
        if [ ! -f saxon-he-12.4.jar ]; then
          wget https://github.com/Saxonica/Saxon-HE/releases/download/SaxonHE12-4/SaxonHE12-4J.zip
          unzip SaxonHE12-4J.zip
        fi

    - name: Get changed files from payload
      id: changes
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          # Get changed files from repository_dispatch payload
          CHANGED_FILES='${{ github.event.client_payload.changed_files }}'
          if [ "$CHANGED_FILES" != "null" ] && [ -n "$CHANGED_FILES" ]; then
            echo "Changed files from payload:"
            echo "$CHANGED_FILES" | jq -r '.[]'
            echo "has_changes=true" >> $GITHUB_OUTPUT
            # Save changed files for next step
            echo "$CHANGED_FILES" | jq -r '.[]' > changed_files.txt
          else
            echo "No files in payload"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
        else
          # Fallback: check for recent changes in data repo
          cd data-repo
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD -- data/editions/*.xml | head -20)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No XML files changed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changed files:"
            echo "$CHANGED_FILES"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "$CHANGED_FILES" > ../changed_files.txt
          fi
        fi

    - name: Process changed XML files
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        # Create output directories
        mkdir -p pdf-leseansicht
        mkdir -p tex-leseansicht
        mkdir -p processing-logs
        
        # Initialize counters
        TOTAL=0
        SUCCESS=0
        FAILED=0
        
        # Process each changed file
        while IFS= read -r file; do
          if [ -n "$file" ]; then
            TOTAL=$((TOTAL + 1))
            filename=$(basename "$file" .xml)
            
            echo "=== Processing $filename ==="
            
            # Create log file for this processing
            LOG_FILE="processing-logs/${filename}.log"
            
            {
              echo "Processing $filename at $(date)"
              echo "=========================="
              
              # Step 1: XSLT transformation
              echo "Step 1: XSLT transformation"
              if java -jar saxon-he-12.4.jar \
                -s:"data-repo/$file" \
                -xsl:xslt/einzel-pdfAnsicht-nach-TeX.xsl \
                -o:"tex-leseansicht/${filename}.tex"; then
                echo "âœ“ XSLT transformation successful"
              else
                echo "âœ— XSLT transformation failed"
                echo "FAILED: $filename - XSLT transformation" >> processing-logs/summary.log
                FAILED=$((FAILED + 1))
                continue
              fi
              
              # Step 2: First XeLaTeX run
              echo "Step 2: First XeLaTeX compilation"
              cd tex-leseansicht
              if xelatex -interaction=nonstopmode "${filename}.tex" > /dev/null 2>&1; then
                echo "âœ“ First XeLaTeX run successful"
              else
                echo "âœ— First XeLaTeX run failed"
                cd ..
                echo "FAILED: $filename - First XeLaTeX run" >> processing-logs/summary.log
                FAILED=$((FAILED + 1))
                continue
              fi
              
              # Step 3: Splitindex processing
              echo "Step 3: Splitindex processing"
              if ls "${filename}"*.idx 1> /dev/null 2>&1; then
                if splitindex "${filename}" > /dev/null 2>&1; then
                  echo "âœ“ Splitindex processing successful"
                else
                  echo "âœ— Splitindex processing failed"
                  cd ..
                  echo "FAILED: $filename - Splitindex processing" >> processing-logs/summary.log
                  FAILED=$((FAILED + 1))
                  continue
                fi
              else
                echo "! No index files found, skipping splitindex"
              fi
              
              # Step 4: Final XeLaTeX run
              echo "Step 4: Final XeLaTeX compilation"
              if xelatex -interaction=nonstopmode "${filename}.tex" > /dev/null 2>&1; then
                echo "âœ“ Final XeLaTeX run successful"
              else
                echo "âœ— Final XeLaTeX run failed"
                cd ..
                echo "FAILED: $filename - Final XeLaTeX run" >> processing-logs/summary.log
                FAILED=$((FAILED + 1))
                continue
              fi
              
              # Step 5: Move PDF to output directory
              if [ -f "${filename}.pdf" ]; then
                mv "${filename}.pdf" "../pdf-leseansicht/"
                echo "âœ“ PDF moved to pdf-leseansicht/"
                echo "SUCCESS: $filename" >> ../processing-logs/summary.log
                SUCCESS=$((SUCCESS + 1))
              else
                echo "âœ— PDF file not found"
                echo "FAILED: $filename - PDF not generated" >> ../processing-logs/summary.log
                FAILED=$((FAILED + 1))
              fi
              
              cd ..
              
            } >> "$LOG_FILE" 2>&1
            
            # Show progress
            echo "Processed $filename (Success: $SUCCESS, Failed: $FAILED, Total: $TOTAL)"
          fi
        done < changed_files.txt
        
        # Create summary
        echo "=== PROCESSING SUMMARY ===" > processing-logs/final-summary.log
        echo "Total files processed: $TOTAL" >> processing-logs/final-summary.log
        echo "Successful: $SUCCESS" >> processing-logs/final-summary.log
        echo "Failed: $FAILED" >> processing-logs/final-summary.log
        echo "Date: $(date)" >> processing-logs/final-summary.log
        
        # Show summary
        cat processing-logs/final-summary.log

    - name: Clean up auxiliary files
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        # Clean up tex-leseansicht auxiliary files but keep .tex files
        find tex-leseansicht -name "*.aux" -delete
        find tex-leseansicht -name "*.log" -delete
        find tex-leseansicht -name "*.idx" -delete
        find tex-leseansicht -name "*.ilg" -delete
        find tex-leseansicht -name "*.ind" -delete
        find tex-leseansicht -name "*.out" -delete
        find tex-leseansicht -name "*.toc" -delete
        find tex-leseansicht -name "*.fls" -delete
        find tex-leseansicht -name "*.fdb_latexmk" -delete

    - name: Commit and push results
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated files
        git add pdf-leseansicht/
        git add tex-leseansicht/
        git add processing-logs/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Create commit message with summary
          SUMMARY=$(cat processing-logs/final-summary.log)
          git commit -m "Auto-generate PDFs from XML changes - $SUMMARY - ðŸ¤– Generated with GitHub Actions"
          git push
        fi

    - name: Upload processing logs as artifacts
      if: always() && steps.changes.outputs.has_changes == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: processing-logs-${{ github.run_number }}
        path: processing-logs/
        retention-days: 30