name: Erzeuge PDFs mit XeLaTeX

on:
  workflow_dispatch: # Allow manual trigger
  push:
    paths:
      - 'tex-leseansicht/*.tex'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      total-batches: ${{ steps.generate-matrix.outputs.total-batches }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Generate matrix for batch processing
      id: generate-matrix
      run: |
        # Count tex files and create batch matrix
        if [ ! -d "tex-leseansicht" ]; then
          echo "tex-leseansicht directory not found"
          exit 1
        fi
        
        # Get sorted list of tex files
        TEX_FILES=($(find tex-leseansicht -name "*.tex" | sort))
        TOTAL_FILES=${#TEX_FILES[@]}
        
        if [ $TOTAL_FILES -eq 0 ]; then
          echo "No tex files found"
          exit 1
        fi
        
        # Calculate number of batches (750 files per batch)
        BATCH_SIZE=750
        TOTAL_BATCHES=$(( (TOTAL_FILES + BATCH_SIZE - 1) / BATCH_SIZE ))
        
        echo "Total files: $TOTAL_FILES"
        echo "Batch size: $BATCH_SIZE"
        echo "Total batches: $TOTAL_BATCHES"
        
        # Create matrix array
        MATRIX_JSON="["
        for i in $(seq 0 $((TOTAL_BATCHES - 1))); do
          if [ $i -gt 0 ]; then
            MATRIX_JSON="${MATRIX_JSON},"
          fi
          MATRIX_JSON="${MATRIX_JSON}${i}"
        done
        MATRIX_JSON="${MATRIX_JSON}]"
        
        echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT
        echo "total-batches=${TOTAL_BATCHES}" >> $GITHUB_OUTPUT

  generate-pdfs:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        batch: ${{ fromJson(needs.setup.outputs.matrix) }}
      fail-fast: false
      max-parallel: 6
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Clone private repository with fonts and symbols
      uses: GuillaumeFalourd/clone-github-repo-action@v2
      with:
          owner: 'arthur-schnitzler'
          repository: 'schnitzler-briefe-tex-private-files'
          access-token: ${{ secrets.SCHNITZLER_TEX_PRIVATE }}

    - name: Install TeXLive
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-full
        sudo apt-get install -y xindy

    - name: Process LaTeX files to PDFs (Batch ${{ matrix.batch }})
      run: |
        # Create output directory
        mkdir -p pdf-leseansicht
        mkdir -p processing-logs
        
        # Initialize counters
        TOTAL=0
        SUCCESS=0
        FAILED=0
        BATCH_NUM=${{ matrix.batch }}
        BATCH_SIZE=750
        
        # Get sorted list of all LaTeX files
        TEX_FILES=($(find tex-leseansicht -name "*.tex" | sort))
        TOTAL_FILES=${#TEX_FILES[@]}
        
        if [ $TOTAL_FILES -eq 0 ]; then
          echo "❌ No LaTeX files found in tex-leseansicht/"
          exit 1
        fi
        
        # Calculate file range for this batch
        START_IDX=$((BATCH_NUM * BATCH_SIZE))
        END_IDX=$((START_IDX + BATCH_SIZE - 1))
        
        if [ $START_IDX -ge $TOTAL_FILES ]; then
          echo "❌ Batch $BATCH_NUM start index ($START_IDX) exceeds total files ($TOTAL_FILES)"
          exit 1
        fi
        
        if [ $END_IDX -ge $TOTAL_FILES ]; then
          END_IDX=$((TOTAL_FILES - 1))
        fi
        
        echo "=== BATCH $BATCH_NUM PROCESSING ==="
        echo "Total files in repository: $TOTAL_FILES"
        echo "Processing files $START_IDX to $END_IDX ($(($END_IDX - $START_IDX + 1)) files)"
        echo "Batch size: $BATCH_SIZE"
        echo "=================================="
        
        # Process files in this batch
        for i in $(seq $START_IDX $END_IDX); do
          texfile="${TEX_FILES[$i]}"
          if [ -f "$texfile" ]; then
            TOTAL=$((TOTAL + 1))
            filename=$(basename "$texfile" .tex)
            
            echo "=== Processing $filename ==="
            
            # Create log file for this processing
            LOG_FILE="processing-logs/${filename}-pdf.log"
            
            # Initialize processing status
            PROCESS_SUCCESS=0
            
            # Process each file individually with full error isolation
            echo "Starting PDF generation for $filename..." > "$LOG_FILE"
            
            if (
              exec >> "$LOG_FILE" 2>&1
              set -e  # Exit on error within this subshell only
              
              echo "PDF generation for $filename at $(date)"
              echo "LaTeX file: $texfile"
              echo "Working directory: $(pwd)"
              echo "=========================="
              
              # Change to tex-leseansicht directory
              cd tex-leseansicht
              echo "Changed to: $(pwd)"
              
              # Check file exists
              if [ ! -f "${filename}.tex" ]; then
                echo "✗ LaTeX file not found: ${filename}.tex"
                echo "Available files:"
                ls -la *.tex | head -5
                false
              fi
              
              echo "LaTeX file size: $(wc -l < ${filename}.tex) lines"
              echo "First few lines of LaTeX file:"
              head -5 "${filename}.tex"
              
              # Step 1: First XeLaTeX run
              echo "Step 1: First XeLaTeX compilation"
              timeout 300 xelatex -interaction=nonstopmode "${filename}.tex"
              echo "✓ First XeLaTeX run completed"
              
              # Step 2: Splitindex processing (if index files exist)
              echo "Step 2: Splitindex processing"
              if ls "${filename}"*.idx 1> /dev/null 2>&1; then
                echo "Found index files, running splitindex..."
                timeout 60 splitindex "${filename}" || echo "Splitindex failed, continuing..."
                echo "✓ Splitindex processing attempted"
              else
                echo "! No index files found, skipping splitindex"
              fi
              
              # Step 3: Second XeLaTeX run
              echo "Step 3: Second XeLaTeX compilation"  
              timeout 300 xelatex -interaction=nonstopmode "${filename}.tex"
              echo "✓ Second XeLaTeX run completed"
              
              # Step 4: Final XeLaTeX run
              echo "Step 4: Final XeLaTeX compilation"
              timeout 300 xelatex -interaction=nonstopmode "${filename}.tex"  
              echo "✓ Final XeLaTeX run completed"
              
              # Step 5: Check and move PDF
              if [ -f "${filename}.pdf" ]; then
                PDF_SIZE=$(stat -c%s "${filename}.pdf" 2>/dev/null || stat -f%z "${filename}.pdf" 2>/dev/null || echo "0")
                if [ "$PDF_SIZE" -gt 1000 ]; then
                  mv "${filename}.pdf" "../pdf-leseansicht/"
                  echo "✓ PDF created and moved (${PDF_SIZE} bytes)"
                  echo "SUCCESS: $filename" >> ../processing-logs/summary.log
                else
                  echo "✗ PDF too small or corrupted (${PDF_SIZE} bytes)"
                  false
                fi
              else
                echo "✗ PDF file not found"
                false
              fi
              
            ); then
              SUCCESS=$((SUCCESS + 1))
              echo "✓ Successfully processed $filename (Success: $SUCCESS, Failed: $FAILED, Total: $TOTAL)"
            else
              FAILED=$((FAILED + 1))
              echo "✗ Failed to process $filename (Success: $SUCCESS, Failed: $FAILED, Total: $TOTAL)"
              echo "FAILED: $filename - Check log for details" >> processing-logs/summary.log
            fi
            
            # Clean up auxiliary files for this file
            cd tex-leseansicht
            rm -f "${filename}".aux "${filename}".log "${filename}".idx "${filename}".ilg 
            rm -f "${filename}".ind "${filename}".out "${filename}".toc "${filename}".fls 
            rm -f "${filename}".fdb_latexmk xelatex*.log splitindex.log
            cd ..
            
          fi
        done
        
        # Create final summary for this batch
        echo "=== PDF GENERATION SUMMARY - BATCH $BATCH_NUM ===" > processing-logs/pdf-summary-batch-$BATCH_NUM.log
        echo "Batch number: $BATCH_NUM" >> processing-logs/pdf-summary-batch-$BATCH_NUM.log
        echo "File range: $START_IDX to $END_IDX" >> processing-logs/pdf-summary-batch-$BATCH_NUM.log
        echo "Total LaTeX files processed: $TOTAL" >> processing-logs/pdf-summary-batch-$BATCH_NUM.log
        echo "Successful PDFs: $SUCCESS" >> processing-logs/pdf-summary-batch-$BATCH_NUM.log
        echo "Failed PDFs: $FAILED" >> processing-logs/pdf-summary-batch-$BATCH_NUM.log
        echo "Success rate: $([ $TOTAL -gt 0 ] && echo "scale=1; $SUCCESS * 100 / $TOTAL" | bc || echo "0")%" >> processing-logs/pdf-summary-batch-$BATCH_NUM.log
        echo "Date: $(date)" >> processing-logs/pdf-summary-batch-$BATCH_NUM.log
        
        # Show summary
        cat processing-logs/pdf-summary-batch-$BATCH_NUM.log
        
        # List generated PDFs
        echo ""
        echo "Generated PDFs in this batch:"
        ls -lah pdf-leseansicht/*.pdf 2>/dev/null | head -20 || echo "No PDFs generated in this batch"
        
        # Show final results
        echo ""
        echo "=== BATCH $BATCH_NUM RESULTS ==="
        echo "Processed: $TOTAL files"
        echo "Successful: $SUCCESS files"  
        echo "Failed: $FAILED files"
        
        if [ $SUCCESS -gt 0 ]; then
          echo "✓ Batch $BATCH_NUM completed with $SUCCESS successful PDFs"
        else
          echo "⚠️  Batch $BATCH_NUM generated no successful PDFs"
        fi

    - name: Commit and push PDFs (Batch ${{ matrix.batch }})
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated PDFs and logs
        git add pdf-leseansicht/
        git add processing-logs/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit for batch ${{ matrix.batch }}"
        else
          # Create commit message with batch summary
          BATCH_NUM=${{ matrix.batch }}
          if [ -f "processing-logs/pdf-summary-batch-$BATCH_NUM.log" ]; then
            SUMMARY=$(cat processing-logs/pdf-summary-batch-$BATCH_NUM.log | grep -E "(Total|Successful|Failed|Success rate)" | tr '\n' '; ')
            COMMIT_MSG="Auto-generate PDFs - Batch $BATCH_NUM - $SUMMARY - 🤖 Generated with GitHub Actions"
          else
            COMMIT_MSG="Auto-generate PDFs - Batch $BATCH_NUM completed - 🤖 Generated with GitHub Actions"
          fi
          
          git commit -m "$COMMIT_MSG"
          
          # Push with retry logic to handle parallel commits
          MAX_RETRIES=10
          RETRY_COUNT=0
          PUSH_SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" = false ]; do
            echo "Push attempt $((RETRY_COUNT + 1)) for batch $BATCH_NUM"
            
            if git push; then
              echo "✓ Successfully pushed batch $BATCH_NUM"
              PUSH_SUCCESS=true
            else
              echo "Push failed for batch $BATCH_NUM, attempting pull and rebase..."
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                # Pull with rebase to handle conflicts
                git pull --rebase origin main || {
                  echo "Rebase failed, trying merge strategy..."
                  git rebase --abort 2>/dev/null || true
                  git pull origin main
                }
                
                # Random delay to reduce collision probability (1-30 seconds)
                DELAY=$((RANDOM % 30 + 1))
                echo "Waiting ${DELAY} seconds before retry..."
                sleep $DELAY
              fi
            fi
          done
          
          if [ "$PUSH_SUCCESS" = false ]; then
            echo "❌ Failed to push batch $BATCH_NUM after $MAX_RETRIES attempts"
            echo "This may indicate a persistent conflict that needs manual resolution."
            exit 1
          fi
        fi

    - name: Upload processing logs as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pdf-processing-logs-batch-${{ matrix.batch }}-${{ github.run_number }}
        path: processing-logs/
        retention-days: 30

    - name: Upload failed LaTeX files for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: failed-latex-debug-batch-${{ matrix.batch }}-${{ github.run_number }}
        path: tex-leseansicht/
        retention-days: 7