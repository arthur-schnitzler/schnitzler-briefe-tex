name: PDF Generation from LaTeX Files

on:
  workflow_dispatch: # Allow manual trigger
  push:
    paths:
      - 'tex-leseansicht/*.tex'

jobs:
  generate-pdfs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Install TeXLive
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-full
        sudo apt-get install -y xindy

    - name: Process LaTeX files to PDFs
      run: |
        # Create output directory
        mkdir -p pdf-leseansicht
        mkdir -p processing-logs
        
        # Initialize counters
        TOTAL=0
        SUCCESS=0
        FAILED=0
        
        # Get list of LaTeX files
        echo "Checking for LaTeX files in tex-leseansicht/"
        echo "Directory contents:"
        ls -la tex-leseansicht/ || echo "tex-leseansicht directory not found"
        
        if [ ! -d "tex-leseansicht" ]; then
          echo "‚ùå tex-leseansicht directory does not exist"
          exit 1
        fi
        
        if [ -z "$(ls -A tex-leseansicht/*.tex 2>/dev/null)" ]; then
          echo "‚ùå No LaTeX files found in tex-leseansicht/"
          echo "Available files in tex-leseansicht/:"
          ls -la tex-leseansicht/ || echo "Directory is empty or inaccessible"
          exit 1
        fi
        
        echo "‚úì Found LaTeX files, starting processing..."
        
        # Process each LaTeX file
        for texfile in tex-leseansicht/*.tex; do
          if [ -f "$texfile" ]; then
            TOTAL=$((TOTAL + 1))
            filename=$(basename "$texfile" .tex)
            
            echo "=== Processing $filename ==="
            
            # Create log file for this processing
            LOG_FILE="processing-logs/${filename}-pdf.log"
            
            # Initialize processing status
            PROCESS_SUCCESS=0
            
            # Process each file individually with full error isolation
            echo "Starting PDF generation for $filename..." > "$LOG_FILE"
            
            if (
              exec >> "$LOG_FILE" 2>&1
              set -e  # Exit on error within this subshell only
              
              echo "PDF generation for $filename at $(date)"
              echo "LaTeX file: $texfile"
              echo "Working directory: $(pwd)"
              echo "=========================="
              
              # Change to tex-leseansicht directory
              cd tex-leseansicht
              echo "Changed to: $(pwd)"
              
              # Check file exists
              if [ ! -f "${filename}.tex" ]; then
                echo "‚úó LaTeX file not found: ${filename}.tex"
                echo "Available files:"
                ls -la *.tex | head -5
                false
              fi
              
              echo "LaTeX file size: $(wc -l < ${filename}.tex) lines"
              echo "First few lines of LaTeX file:"
              head -5 "${filename}.tex"
              
              # Step 1: First XeLaTeX run
              echo "Step 1: First XeLaTeX compilation"
              timeout 300 xelatex -interaction=nonstopmode "${filename}.tex"
              echo "‚úì First XeLaTeX run completed"
              
              # Step 2: Splitindex processing (if index files exist)
              echo "Step 2: Splitindex processing"
              if ls "${filename}"*.idx 1> /dev/null 2>&1; then
                echo "Found index files, running splitindex..."
                timeout 60 splitindex "${filename}" || echo "Splitindex failed, continuing..."
                echo "‚úì Splitindex processing attempted"
              else
                echo "! No index files found, skipping splitindex"
              fi
              
              # Step 3: Second XeLaTeX run
              echo "Step 3: Second XeLaTeX compilation"  
              timeout 300 xelatex -interaction=nonstopmode "${filename}.tex"
              echo "‚úì Second XeLaTeX run completed"
              
              # Step 4: Final XeLaTeX run
              echo "Step 4: Final XeLaTeX compilation"
              timeout 300 xelatex -interaction=nonstopmode "${filename}.tex"  
              echo "‚úì Final XeLaTeX run completed"
              
              # Step 5: Check and move PDF
              if [ -f "${filename}.pdf" ]; then
                PDF_SIZE=$(stat -c%s "${filename}.pdf" 2>/dev/null || stat -f%z "${filename}.pdf" 2>/dev/null || echo "0")
                if [ "$PDF_SIZE" -gt 1000 ]; then
                  mv "${filename}.pdf" "../pdf-leseansicht/"
                  echo "‚úì PDF created and moved (${PDF_SIZE} bytes)"
                  echo "SUCCESS: $filename" >> ../processing-logs/summary.log
                else
                  echo "‚úó PDF too small or corrupted (${PDF_SIZE} bytes)"
                  false
                fi
              else
                echo "‚úó PDF file not found"
                false
              fi
              
            ); then
              SUCCESS=$((SUCCESS + 1))
              echo "‚úì Successfully processed $filename (Success: $SUCCESS, Failed: $FAILED, Total: $TOTAL)"
            else
              FAILED=$((FAILED + 1))
              echo "‚úó Failed to process $filename (Success: $SUCCESS, Failed: $FAILED, Total: $TOTAL)"
              echo "FAILED: $filename - Check log for details" >> processing-logs/summary.log
            fi
            
            # Clean up auxiliary files for this file
            cd tex-leseansicht
            rm -f "${filename}".aux "${filename}".log "${filename}".idx "${filename}".ilg 
            rm -f "${filename}".ind "${filename}".out "${filename}".toc "${filename}".fls 
            rm -f "${filename}".fdb_latexmk xelatex*.log splitindex.log
            cd ..
            
          fi
        done
        
        # Create final summary
        echo "=== PDF GENERATION SUMMARY ===" > processing-logs/pdf-summary.log
        echo "Total LaTeX files processed: $TOTAL" >> processing-logs/pdf-summary.log
        echo "Successful PDFs: $SUCCESS" >> processing-logs/pdf-summary.log
        echo "Failed PDFs: $FAILED" >> processing-logs/pdf-summary.log
        echo "Success rate: $([ $TOTAL -gt 0 ] && echo "scale=1; $SUCCESS * 100 / $TOTAL" | bc || echo "0")%" >> processing-logs/pdf-summary.log
        echo "Date: $(date)" >> processing-logs/pdf-summary.log
        
        # Show summary
        cat processing-logs/pdf-summary.log
        
        # List generated PDFs
        echo ""
        echo "Generated PDFs:"
        ls -lah pdf-leseansicht/*.pdf 2>/dev/null | head -20 || echo "No PDFs generated"
        
        # Show final results
        echo ""
        echo "=== FINAL RESULTS ==="
        echo "Processed: $TOTAL files"
        echo "Successful: $SUCCESS files"  
        echo "Failed: $FAILED files"
        
        if [ $SUCCESS -gt 0 ]; then
          echo "‚úì Proceeding with commit of successful PDFs..."
        else
          echo "‚ö†Ô∏è  No successful PDFs generated, but continuing for logs..."
        fi

    - name: Commit and push PDFs
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated PDFs and logs
        git add pdf-leseansicht/
        git add processing-logs/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Create commit message with summary
          SUMMARY=$(cat processing-logs/pdf-summary.log | grep -E "(Total|Successful|Failed|Success rate)" | tr '\n' '; ')
          git commit -m "Auto-generate PDFs from LaTeX files - $SUMMARY - ü§ñ Generated with GitHub Actions"
          git push
        fi

    - name: Upload processing logs as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pdf-processing-logs-${{ github.run_number }}
        path: processing-logs/
        retention-days: 30

    - name: Upload failed LaTeX files for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: failed-latex-debug-${{ github.run_number }}
        path: tex-leseansicht/
        retention-days: 7