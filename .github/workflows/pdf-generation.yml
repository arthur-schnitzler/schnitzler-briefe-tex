name: PDF Generation from LaTeX Files

on:
  workflow_dispatch: # Allow manual trigger
  push:
    paths:
      - 'tex-leseansicht/*.tex'

jobs:
  generate-pdfs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Install TeXLive
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-full
        sudo apt-get install -y xindy

    - name: Process LaTeX files to PDFs
      run: |
        # Create output directory
        mkdir -p pdf-leseansicht
        mkdir -p processing-logs
        
        # Initialize counters
        TOTAL=0
        SUCCESS=0
        FAILED=0
        
        # Get list of LaTeX files
        if [ ! -d "tex-leseansicht" ] || [ -z "$(ls -A tex-leseansicht/*.tex 2>/dev/null)" ]; then
          echo "No LaTeX files found in tex-leseansicht/"
          exit 0
        fi
        
        # Process each LaTeX file
        for texfile in tex-leseansicht/*.tex; do
          if [ -f "$texfile" ]; then
            TOTAL=$((TOTAL + 1))
            filename=$(basename "$texfile" .tex)
            
            echo "=== Processing $filename ==="
            
            # Create log file for this processing
            LOG_FILE="processing-logs/${filename}-pdf.log"
            
            # Process in a subshell to isolate failures
            (
              echo "PDF generation for $filename at $(date)"
              echo "LaTeX file: $texfile"
              echo "=========================="
              
              # Change to tex-leseansicht directory
              cd tex-leseansicht
              
              # Check file exists
              if [ ! -f "${filename}.tex" ]; then
                echo "âœ— LaTeX file not found: ${filename}.tex"
                echo "FAILED: $filename - LaTeX file missing" >> ../processing-logs/summary.log
                exit 1
              fi
              
              echo "LaTeX file size: $(wc -l < ${filename}.tex) lines"
              
              # Step 1: First XeLaTeX run
              echo "Step 1: First XeLaTeX compilation"
              if timeout 300 xelatex -interaction=nonstopmode "${filename}.tex" 2>&1 | tee xelatex1.log; then
                echo "âœ“ First XeLaTeX run successful"
              else
                echo "âœ— First XeLaTeX run failed"
                echo "XeLaTeX error output:"
                tail -30 xelatex1.log | grep -E "(Error|error|!|Fatal)" || echo "No specific errors found"
                echo "FAILED: $filename - First XeLaTeX run" >> ../processing-logs/summary.log
                exit 1
              fi
              
              # Step 2: Splitindex processing (if index files exist)
              echo "Step 2: Splitindex processing"
              if ls "${filename}"*.idx 1> /dev/null 2>&1; then
                echo "Found index files, running splitindex..."
                if timeout 60 splitindex "${filename}" 2>&1 | tee splitindex.log; then
                  echo "âœ“ Splitindex processing successful"
                else
                  echo "âœ— Splitindex processing failed"
                  echo "Splitindex error output:"
                  tail -10 splitindex.log
                  echo "WARNING: $filename - Splitindex failed, continuing anyway" >> ../processing-logs/summary.log
                fi
              else
                echo "! No index files found, skipping splitindex"
              fi
              
              # Step 3: Second XeLaTeX run (for references and index)
              echo "Step 3: Second XeLaTeX compilation"
              if timeout 300 xelatex -interaction=nonstopmode "${filename}.tex" 2>&1 | tee xelatex2.log; then
                echo "âœ“ Second XeLaTeX run successful"
              else
                echo "âœ— Second XeLaTeX run failed"
                echo "XeLaTeX error output:"
                tail -30 xelatex2.log | grep -E "(Error|error|!|Fatal)" || echo "No specific errors found"
                echo "FAILED: $filename - Second XeLaTeX run" >> ../processing-logs/summary.log
                exit 1
              fi
              
              # Step 4: Third XeLaTeX run (for final layout)
              echo "Step 4: Final XeLaTeX compilation"
              if timeout 300 xelatex -interaction=nonstopmode "${filename}.tex" 2>&1 | tee xelatex3.log; then
                echo "âœ“ Final XeLaTeX run successful"
              else
                echo "âœ— Final XeLaTeX run failed"
                echo "XeLaTeX error output:"
                tail -30 xelatex3.log | grep -E "(Error|error|!|Fatal)" || echo "No specific errors found"
                echo "FAILED: $filename - Final XeLaTeX run" >> ../processing-logs/summary.log
                exit 1
              fi
              
              # Step 5: Check and move PDF
              if [ -f "${filename}.pdf" ]; then
                # Check PDF file size
                PDF_SIZE=$(stat -c%s "${filename}.pdf" 2>/dev/null || echo "0")
                if [ "$PDF_SIZE" -gt 1000 ]; then
                  mv "${filename}.pdf" "../pdf-leseansicht/"
                  echo "âœ“ PDF created and moved (${PDF_SIZE} bytes)"
                  echo "SUCCESS: $filename" >> ../processing-logs/summary.log
                else
                  echo "âœ— PDF too small or corrupted (${PDF_SIZE} bytes)"
                  echo "FAILED: $filename - PDF corrupted" >> ../processing-logs/summary.log
                  exit 1
                fi
              else
                echo "âœ— PDF file not found"
                echo "FAILED: $filename - PDF not generated" >> ../processing-logs/summary.log
                exit 1
              fi
              
            ) >> "$LOG_FILE" 2>&1
            
            # Check if processing succeeded
            if [ $? -eq 0 ]; then
              SUCCESS=$((SUCCESS + 1))
              echo "âœ“ Successfully processed $filename (Success: $SUCCESS, Failed: $FAILED, Total: $TOTAL)"
            else
              FAILED=$((FAILED + 1))
              echo "âœ— Failed to process $filename (Success: $SUCCESS, Failed: $FAILED, Total: $TOTAL)"
            fi
            
            # Clean up auxiliary files for this file
            cd tex-leseansicht
            rm -f "${filename}".aux "${filename}".log "${filename}".idx "${filename}".ilg 
            rm -f "${filename}".ind "${filename}".out "${filename}".toc "${filename}".fls 
            rm -f "${filename}".fdb_latexmk xelatex*.log splitindex.log
            cd ..
            
          fi
        done
        
        # Create final summary
        echo "=== PDF GENERATION SUMMARY ===" > processing-logs/pdf-summary.log
        echo "Total LaTeX files processed: $TOTAL" >> processing-logs/pdf-summary.log
        echo "Successful PDFs: $SUCCESS" >> processing-logs/pdf-summary.log
        echo "Failed PDFs: $FAILED" >> processing-logs/pdf-summary.log
        echo "Success rate: $([ $TOTAL -gt 0 ] && echo "scale=1; $SUCCESS * 100 / $TOTAL" | bc || echo "0")%" >> processing-logs/pdf-summary.log
        echo "Date: $(date)" >> processing-logs/pdf-summary.log
        
        # Show summary
        cat processing-logs/pdf-summary.log
        
        # List generated PDFs
        echo ""
        echo "Generated PDFs:"
        ls -lah pdf-leseansicht/*.pdf 2>/dev/null | head -20 || echo "No PDFs generated"
        
        # Even if some files failed, continue to commit successful ones
        echo "Proceeding with commit of successful PDFs..."

    - name: Commit and push PDFs
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated PDFs and logs
        git add pdf-leseansicht/
        git add processing-logs/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Create commit message with summary
          SUMMARY=$(cat processing-logs/pdf-summary.log | grep -E "(Total|Successful|Failed|Success rate)" | tr '\n' '; ')
          git commit -m "Auto-generate PDFs from LaTeX files - $SUMMARY - ðŸ¤– Generated with GitHub Actions"
          git push
        fi

    - name: Upload processing logs as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pdf-processing-logs-${{ github.run_number }}
        path: processing-logs/
        retention-days: 30

    - name: Upload failed LaTeX files for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: failed-latex-debug-${{ github.run_number }}
        path: tex-leseansicht/
        retention-days: 7